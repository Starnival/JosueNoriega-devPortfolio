---
// src/components/ui/ProjectDetails.astro
import { projects } from '../../data/resume.json';

// Definición de tipos para la estructura de datos de tu proyecto
interface ProjectData {
    name: string;
    startDate: string;
    endDate: string;
    description: string;
    highlights: string[];
    url: string;
}
// Define la interfaz del evento personalizado para que TypeScript lo reconozca
interface ProjectModalEventDetail {
    projectName: string;
}
---

<div id="project-modal" class="project-modal">
    <div class="modal-content neumorphic-raised">
        <button class="modal-close-btn" id="modal-close-btn" aria-label="Cerrar ventana">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                class="close-icon"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
            >
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
            </svg>
        </button>
        <div id="modal-details"></div>
    </div>
</div>

<script>
    // Importamos los datos (Asumimos que la estructura del JSON es accesible)
    // ⚠️ Si el JSON es muy grande, considera pasarlo como data-attribute o usar una API.
    import { projects } from '../../data/resume.json';
    (() => {
        // 1. Aserción de Tipos de Elementos
        const modal = document.getElementById('project-modal') as HTMLDivElement;
        const closeButton = document.getElementById('modal-close-btn') as HTMLButtonElement;
        const modalDetails = document.getElementById('modal-details') as HTMLDivElement;

        if (!modal || !closeButton || !modalDetails) return; // Validación de existencia

        // --- Lógica de Cierre ---
        const closeModal = () => {
            modal.classList.remove('is-open');
            document.body.classList.remove('modal-active'); // Quita el blur
        };

        closeButton.addEventListener('click', closeModal);
        // Cierre al hacer click en el overlay
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        // --- Lógica de Apertura ---
        document.addEventListener('openProjectModal', (e) => {
            // ⚠️ CORRECCIÓN CLAVE: Usamos 'projectId' que es lo que el ProjectCard envía.
            const event = e as CustomEvent<{ projectId: string }>;
            const projectId = event.detail.projectId;

            // Busca los datos del proyecto usando el ID
            // ⚠️ Usamos 'id' en lugar de 'name'
            const projectData = projects.find((p) => p.id === projectId);

            if (projectData) {
                // Rellenar el contenido del modal
                modalDetails.innerHTML = `
                <header class="modal-header">
                    <h2>${projectData.name}</h2>
                    <time>${projectData.startDate} - ${projectData.endDate}</time>
                </header>
                <div class="modal-body">
                    <p class="modal-description">${projectData.description}</p>

                    <p class="modal-section-title">Tecnologías Utilizadas</p>
                    <div class="modal-tech-list">
                        ${projectData.technologies.map((tech) => `<span class="tech-tag">${tech}</span>`).join('')}
                    </div>

                    <p class="modal-section-title">Puntos Destacados</p>
                    <ul>
                        ${projectData.highlights.map((h) => `<li>${h}</li>`).join('')}
                    </ul>
                </div>
                <a href="${projectData.url}" target="_blank" rel="noopener noreferrer" class="project-link">
                    Visitar Proyecto &rarr;
                </a>
            `;

                // Mostrar el modal y aplicar el blur
                modal.classList.add('is-open');
                document.body.classList.add('modal-active');
            } else {
                console.error(`Error: No se encontró el proyecto con ID: ${projectId}`);
            }
        });
    })();
</script>

<style>
    /* src/components/ui/ProjectDetails.astro <style> */
    /* 🔑 CLAVE: Posicionamiento Global y Z-Index Alto */
    .project-modal {
        position: fixed; /* 👈 Este es el estilo CRUCIAL para que flote fuera de la cuadrícula */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        /* Overlay (Fondo oscuro transparente) */
        background-color: rgba(0, 0, 0, 0.7);

        display: none; /* Oculto por defecto */
        place-items: center; /* 👈 Centra el contenido (modal-content) usando Grid */
        z-index: 9999; /* ¡Asegura que esté encima de todo! */

        /* CLAVE: Blur del fondo del modal (el overlay) */
        backdrop-filter: blur(5px);
        transition: opacity 0.3s ease-in-out;
    }

    .project-modal.is-open {
        display: grid; /* Muestra el modal */
    }

    .modal-content {
        /* Neumorfismo y Estructura del Contenedor */
        background-color: var(--fondo-secundario);
        color: var(--texto-principal);
        padding: 2.5rem;
        border-radius: 24px;
        max-width: 700px;
        max-height: 90%;
        overflow-y: auto;

        /* Neumorfismo Saliente Profundo para que el modal se destaque */
        box-shadow:
            20px 20px 40px var(--sombra-oscura-fuerte),
            -20px -20px 40px var(--sombra-clara-suave);

        /* 💡 El modal debe ser relativo para que el botón de cerrar flote */
        position: relative;
    }

    /* Encabezado y Detalles */
    .modal-header h2 {
        color: var(--acento-primario);
        margin-top: 0;
        font-size: 2rem;
    }
    .modal-header time {
        display: block;
        margin-bottom: 1.5rem;
        color: var(--texto-secundario);
    }

    .modal-body {
        display: flex;
        flex-direction: column;
        gap: 1rem; /* Espacio entre secciones del cuerpo */
    }
    .modal-highlights {
        list-style: none;
        padding-left: 0;
    }

    .modal-highlights li {
        color: var(--texto-principal);
        margin-bottom: 0.5rem;
    }
    .modal-section-title {
        font-weight: 600;
        color: var(--texto-principal);
        margin: 0.5rem 0 0.25rem 0;
        border-bottom: 1px solid var(--sombra-clara-suave);
        padding-bottom: 0.25rem;
    }

    .modal-tech-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    /* Reutilizamos el estilo de la tarjeta para consistencia */
    .tech-tag {
        font-size: 0.8rem;
        font-weight: 500;
        color: var(--acento-primario);
        background-color: var(--fondo-principal);
        padding: 0.2rem 0.6rem;
        border-radius: 6px;
        box-shadow: 1px 1px 2px var(--sombra-oscura-fuerte);
    }

    .project-link {
        display: block;
        margin-top: 1.5rem;
        text-align: right;
        color: var(--interactivo);
        font-weight: 600;
    }

    /* Botón de Cierre (Neumórfico) */
    .modal-close-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        top: 20px;
        right: 20px;
        background-color: var(--fondo-secundario);
        color: var(--texto-principal);
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%; /* Circular */
        font-size: 1.5rem;
        cursor: pointer;
        transition: box-shadow 0.3s ease-in-out;
        padding: 0;

        /* Neumorfismo de botón saliente */
        box-shadow:
            3px 3px 6px var(--sombra-oscura-fuerte),
            -3px -3px 6px var(--sombra-clara-suave);

        .close-icon {
            width: 50%;
            height: 50%;
            color: var(--texto-secundario);
        }
    }

    .modal-close-btn:hover {
        /* Neumorphism de botón hundido al pasar el ratón */
        box-shadow:
            inset 4px 4px 8px var(--sombra-oscura-fuerte),
            inset -4px -4px 8px var(--sombra-clara-suave);
    }
</style>
